/// Equivalent structure
pub struct KernelServices {
    name: &'static str,
    file: &'static [u8],
    // (Virtual address, physical address, mapping size).
    // If the physical address is equal to 0, a random regular memory will
    // be allocated. If an address is specified, the corresponding one will
    // be found from both regular memory and device memory. If it is
    // not found, panic !!
    mem: &'static [(usize, usize, usize)],
    /// 格式： (开始地址, 内存大小)
    dma: &'static [(usize, usize)],
}

const TASK_FILES: &[KernelServices] = &[
    KernelServices {
        name: "block-thread",
        file: include_bytes_aligned!(16, "../../target/blk-thread.elf"),
        mem: &[(VIRTIO_MMIO_VIRT_ADDR, VIRTIO_MMIO_ADDR, 0x1000)],
        dma: &[(DMA_ADDR_START, 0x2000)],
    },
    KernelServices {
        name: "uart-thread",
        file: include_bytes_aligned!(16, "../../target/uart-thread.elf"),
        mem: &[(VIRTIO_MMIO_VIRT_ADDR, PL011_ADDR, 0x1000)],
        dma: &[],
    },
    KernelServices {
        name: "fs-thread",
        file: include_bytes_aligned!(16, "../../target/ext4-thread.elf"),
        mem: &[],
        dma: &[],
    },
    // KernelServices {
    //     name: "fs-thread",
    //     file: include_bytes_aligned!(16, "../../target/fat-thread.elf"),
    //     mem: &[],
    //     dma: &[],
    // },
    KernelServices {
        name: "simple-cli",
        file: include_bytes_aligned!(16, "../../target/simple-cli.elf"),
        mem: &[],
        dma: &[],
    },
    KernelServices {
        name: "kernel-thread",
        file: include_bytes_aligned!(16, "../../target/kernel-thread.elf"),
        mem: &[],
        dma: &[],
    },
];
